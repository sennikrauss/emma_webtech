import { ChangeDetectorRef, Component, ElementRef, Inject, Input, } from '@angular/core';
import { MODULE_CONFIG_TOKEN } from '../../config/module.config';
import { Icons } from '../../providers/icon.provider';
/**
 * Bootstrap icon component.
 */
export class NgxBootstrapIconsLibComponent {
    constructor(_elem, _changeDetector, _icons, _config) {
        this._elem = _elem;
        this._changeDetector = _changeDetector;
        this._icons = _icons;
        this._config = _config;
        /** Removes default dimensions from svg. */
        this.resetDefaultDimensions = false;
    }
    /**
     * OnChanges event.
     *
     * @param changes SimpleChanges
     */
    ngOnChanges(changes) {
        // eslint-disable-next-line global-require
        const camelCase = require('camelcase');
        // icons are provided as an array of objects because of "multi: true"
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        const icons = Object.assign({}, ...this._icons);
        let svg = icons[camelCase(changes.name.currentValue)] || '';
        if (!svg) {
            console.warn(`Icon not found: ${changes.name.currentValue}\n`);
            return;
        }
        // if config provided
        if (this._config) {
            if (this._config.width)
                svg = svg.replace('width="16"', `width="${this._config.width}"`);
            if (this._config.height)
                svg = svg.replace('height="16"', `height="${this._config.height}"`);
            if (this._config.theme)
                this._elem.nativeElement.classList.add(this._config.theme);
        }
        if (this.resetDefaultDimensions) {
            svg = svg.replace('width="16"', '');
            svg = svg.replace('height="16"', '');
        }
        if (this.width && svg.includes('width'))
            svg = svg.replace('width="16"', `width="${this.width}"`);
        if (this.height && svg.includes('height'))
            svg = svg.replace('height="16"', `height="${this.height}"`);
        this._elem.nativeElement.innerHTML = svg;
        this._changeDetector.markForCheck();
    }
}
NgxBootstrapIconsLibComponent.decorators = [
    { type: Component, args: [{
                // tslint:disable-next-line: component-selector
                selector: 'i-bs',
                template: '<ng-content></ng-content>'
            },] }
];
NgxBootstrapIconsLibComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: ChangeDetectorRef },
    { type: Icons, decorators: [{ type: Inject, args: [Icons,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [MODULE_CONFIG_TOKEN,] }] }
];
NgxBootstrapIconsLibComponent.propDecorators = {
    name: [{ type: Input }],
    width: [{ type: Input }],
    height: [{ type: Input }],
    resetDefaultDimensions: [{ type: Input }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LWJvb3RzdHJhcC1pY29ucy5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9uZ3gtYm9vdHN0cmFwLWljb25zLWxpYi9zcmMvbGliL2NvbXBvbmVudHMvbmd4LWJvb3RzdHJhcC1pY29ucy9uZ3gtYm9vdHN0cmFwLWljb25zLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ0wsaUJBQWlCLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUsS0FBSyxHQUN4RCxNQUFNLGVBQWUsQ0FBQztBQUV2QixPQUFPLEVBQXdCLG1CQUFtQixFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFFdkYsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLCtCQUErQixDQUFDO0FBRXREOztHQUVHO0FBTUgsTUFBTSxPQUFPLDZCQUE2QjtJQWF4QyxZQUNVLEtBQWlCLEVBQ2pCLGVBQWtDLEVBQ25CLE1BQWEsRUFDQyxPQUE2QjtRQUgxRCxVQUFLLEdBQUwsS0FBSyxDQUFZO1FBQ2pCLG9CQUFlLEdBQWYsZUFBZSxDQUFtQjtRQUNuQixXQUFNLEdBQU4sTUFBTSxDQUFPO1FBQ0MsWUFBTyxHQUFQLE9BQU8sQ0FBc0I7UUFQcEUsMkNBQTJDO1FBQzNCLDJCQUFzQixHQUFHLEtBQUssQ0FBQztJQU8zQyxDQUFDO0lBRUw7Ozs7T0FJRztJQUNJLFdBQVcsQ0FBQyxPQUFzQjtRQUN2QywwQ0FBMEM7UUFDMUMsTUFBTSxTQUFTLEdBQUcsT0FBTyxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBQ3ZDLHFFQUFxRTtRQUNyRSw4REFBOEQ7UUFDOUQsTUFBTSxLQUFLLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsR0FBSSxJQUFJLENBQUMsTUFBMEIsQ0FBQyxDQUFDO1FBQ3JFLElBQUksR0FBRyxHQUFHLEtBQUssQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUU1RCxJQUFJLENBQUMsR0FBRyxFQUFFO1lBQ1IsT0FBTyxDQUFDLElBQUksQ0FBQyxtQkFBbUIsT0FBTyxDQUFDLElBQUksQ0FBQyxZQUFZLElBQUksQ0FBQyxDQUFDO1lBQy9ELE9BQU87U0FDUjtRQUVELHFCQUFxQjtRQUNyQixJQUFJLElBQUksQ0FBQyxPQUFPLEVBQUU7WUFDaEIsSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUs7Z0JBQUUsR0FBRyxHQUFHLEdBQUcsQ0FBQyxPQUFPLENBQUMsWUFBWSxFQUFFLFVBQVUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDO1lBQ3pGLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNO2dCQUFFLEdBQUcsR0FBRyxHQUFHLENBQUMsT0FBTyxDQUFDLGFBQWEsRUFBRSxXQUFXLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQztZQUM3RixJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSztnQkFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLGFBQWEsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDcEY7UUFFRCxJQUFJLElBQUksQ0FBQyxzQkFBc0IsRUFBRTtZQUMvQixHQUFHLEdBQUcsR0FBRyxDQUFDLE9BQU8sQ0FBQyxZQUFZLEVBQUUsRUFBRSxDQUFDLENBQUM7WUFDcEMsR0FBRyxHQUFHLEdBQUcsQ0FBQyxPQUFPLENBQUMsYUFBYSxFQUFFLEVBQUUsQ0FBQyxDQUFDO1NBQ3RDO1FBRUQsSUFBSSxJQUFJLENBQUMsS0FBSyxJQUFJLEdBQUcsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDO1lBQUUsR0FBRyxHQUFHLEdBQUcsQ0FBQyxPQUFPLENBQUMsWUFBWSxFQUFFLFVBQVUsSUFBSSxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUM7UUFDbEcsSUFBSSxJQUFJLENBQUMsTUFBTSxJQUFJLEdBQUcsQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDO1lBQUUsR0FBRyxHQUFHLEdBQUcsQ0FBQyxPQUFPLENBQUMsYUFBYSxFQUFFLFdBQVcsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUM7UUFFdkcsSUFBSSxDQUFDLEtBQUssQ0FBQyxhQUFhLENBQUMsU0FBUyxHQUFHLEdBQUcsQ0FBQztRQUN6QyxJQUFJLENBQUMsZUFBZSxDQUFDLFlBQVksRUFBRSxDQUFDO0lBQ3RDLENBQUM7OztZQTVERixTQUFTLFNBQUM7Z0JBQ1QsK0NBQStDO2dCQUMvQyxRQUFRLEVBQUUsTUFBTTtnQkFDaEIsUUFBUSxFQUFFLDJCQUEyQjthQUN0Qzs7O1lBZCtCLFVBQVU7WUFBeEMsaUJBQWlCO1lBS1YsS0FBSyx1QkEwQlQsTUFBTSxTQUFDLEtBQUs7NENBQ1osTUFBTSxTQUFDLG1CQUFtQjs7O21CQWY1QixLQUFLO29CQUdMLEtBQUs7cUJBR0wsS0FBSztxQ0FHTCxLQUFLIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcclxuICBDaGFuZ2VEZXRlY3RvclJlZiwgQ29tcG9uZW50LCBFbGVtZW50UmVmLCBJbmplY3QsIElucHV0LCBPbkNoYW5nZXMsIFNpbXBsZUNoYW5nZXMsXHJcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcblxyXG5pbXBvcnQgeyBJTW9kdWxlQ29uZmlnT3B0aW9ucywgTU9EVUxFX0NPTkZJR19UT0tFTiB9IGZyb20gJy4uLy4uL2NvbmZpZy9tb2R1bGUuY29uZmlnJztcclxuaW1wb3J0IHsgSWNvbk5hbWVzRW51bSB9IGZyb20gJy4uLy4uL2VudW1zL2ljb24tbmFtZXMuZW51bSc7XHJcbmltcG9ydCB7IEljb25zIH0gZnJvbSAnLi4vLi4vcHJvdmlkZXJzL2ljb24ucHJvdmlkZXInO1xyXG5cclxuLyoqXHJcbiAqIEJvb3RzdHJhcCBpY29uIGNvbXBvbmVudC5cclxuICovXHJcbkBDb21wb25lbnQoe1xyXG4gIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTogY29tcG9uZW50LXNlbGVjdG9yXHJcbiAgc2VsZWN0b3I6ICdpLWJzJyxcclxuICB0ZW1wbGF0ZTogJzxuZy1jb250ZW50PjwvbmctY29udGVudD4nLFxyXG59KVxyXG5leHBvcnQgY2xhc3MgTmd4Qm9vdHN0cmFwSWNvbnNMaWJDb21wb25lbnQgaW1wbGVtZW50cyBPbkNoYW5nZXMge1xyXG4gIC8qKiBJY29uIG5hbWUuICovXHJcbiAgQElucHV0KCkgcHVibGljIG5hbWUhOiBzdHJpbmcgfCBJY29uTmFtZXNFbnVtO1xyXG5cclxuICAvKiogSWNvbiB3aWR0aC4gKi9cclxuICBASW5wdXQoKSBwdWJsaWMgd2lkdGghOiBzdHJpbmc7XHJcblxyXG4gIC8qKiBJY29uIGhlaWdodC4gKi9cclxuICBASW5wdXQoKSBwdWJsaWMgaGVpZ2h0ITogc3RyaW5nO1xyXG5cclxuICAvKiogUmVtb3ZlcyBkZWZhdWx0IGRpbWVuc2lvbnMgZnJvbSBzdmcuICovXHJcbiAgQElucHV0KCkgcHVibGljIHJlc2V0RGVmYXVsdERpbWVuc2lvbnMgPSBmYWxzZTtcclxuXHJcbiAgY29uc3RydWN0b3IoXHJcbiAgICBwcml2YXRlIF9lbGVtOiBFbGVtZW50UmVmLFxyXG4gICAgcHJpdmF0ZSBfY2hhbmdlRGV0ZWN0b3I6IENoYW5nZURldGVjdG9yUmVmLFxyXG4gICAgQEluamVjdChJY29ucykgcHJpdmF0ZSBfaWNvbnM6IEljb25zLFxyXG4gICAgQEluamVjdChNT0RVTEVfQ09ORklHX1RPS0VOKSBwcml2YXRlIF9jb25maWc6IElNb2R1bGVDb25maWdPcHRpb25zLFxyXG4gICkgeyB9XHJcblxyXG4gIC8qKlxyXG4gICAqIE9uQ2hhbmdlcyBldmVudC5cclxuICAgKlxyXG4gICAqIEBwYXJhbSBjaGFuZ2VzIFNpbXBsZUNoYW5nZXNcclxuICAgKi9cclxuICBwdWJsaWMgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcyk6IHZvaWQge1xyXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGdsb2JhbC1yZXF1aXJlXHJcbiAgICBjb25zdCBjYW1lbENhc2UgPSByZXF1aXJlKCdjYW1lbGNhc2UnKTtcclxuICAgIC8vIGljb25zIGFyZSBwcm92aWRlZCBhcyBhbiBhcnJheSBvZiBvYmplY3RzIGJlY2F1c2Ugb2YgXCJtdWx0aTogdHJ1ZVwiXHJcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxyXG4gICAgY29uc3QgaWNvbnMgPSBPYmplY3QuYXNzaWduKHt9LCAuLi4odGhpcy5faWNvbnMgYXMgYW55IGFzIG9iamVjdFtdKSk7XHJcbiAgICBsZXQgc3ZnID0gaWNvbnNbY2FtZWxDYXNlKGNoYW5nZXMubmFtZS5jdXJyZW50VmFsdWUpXSB8fCAnJztcclxuXHJcbiAgICBpZiAoIXN2Zykge1xyXG4gICAgICBjb25zb2xlLndhcm4oYEljb24gbm90IGZvdW5kOiAke2NoYW5nZXMubmFtZS5jdXJyZW50VmFsdWV9XFxuYCk7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICAvLyBpZiBjb25maWcgcHJvdmlkZWRcclxuICAgIGlmICh0aGlzLl9jb25maWcpIHtcclxuICAgICAgaWYgKHRoaXMuX2NvbmZpZy53aWR0aCkgc3ZnID0gc3ZnLnJlcGxhY2UoJ3dpZHRoPVwiMTZcIicsIGB3aWR0aD1cIiR7dGhpcy5fY29uZmlnLndpZHRofVwiYCk7XHJcbiAgICAgIGlmICh0aGlzLl9jb25maWcuaGVpZ2h0KSBzdmcgPSBzdmcucmVwbGFjZSgnaGVpZ2h0PVwiMTZcIicsIGBoZWlnaHQ9XCIke3RoaXMuX2NvbmZpZy5oZWlnaHR9XCJgKTtcclxuICAgICAgaWYgKHRoaXMuX2NvbmZpZy50aGVtZSkgdGhpcy5fZWxlbS5uYXRpdmVFbGVtZW50LmNsYXNzTGlzdC5hZGQodGhpcy5fY29uZmlnLnRoZW1lKTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAodGhpcy5yZXNldERlZmF1bHREaW1lbnNpb25zKSB7XHJcbiAgICAgIHN2ZyA9IHN2Zy5yZXBsYWNlKCd3aWR0aD1cIjE2XCInLCAnJyk7XHJcbiAgICAgIHN2ZyA9IHN2Zy5yZXBsYWNlKCdoZWlnaHQ9XCIxNlwiJywgJycpO1xyXG4gICAgfVxyXG5cclxuICAgIGlmICh0aGlzLndpZHRoICYmIHN2Zy5pbmNsdWRlcygnd2lkdGgnKSkgc3ZnID0gc3ZnLnJlcGxhY2UoJ3dpZHRoPVwiMTZcIicsIGB3aWR0aD1cIiR7dGhpcy53aWR0aH1cImApO1xyXG4gICAgaWYgKHRoaXMuaGVpZ2h0ICYmIHN2Zy5pbmNsdWRlcygnaGVpZ2h0JykpIHN2ZyA9IHN2Zy5yZXBsYWNlKCdoZWlnaHQ9XCIxNlwiJywgYGhlaWdodD1cIiR7dGhpcy5oZWlnaHR9XCJgKTtcclxuXHJcbiAgICB0aGlzLl9lbGVtLm5hdGl2ZUVsZW1lbnQuaW5uZXJIVE1MID0gc3ZnO1xyXG4gICAgdGhpcy5fY2hhbmdlRGV0ZWN0b3IubWFya0ZvckNoZWNrKCk7XHJcbiAgfVxyXG59XHJcbiJdfQ==